name: Push Multi-Arch Latest Manifest

on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: 'Git commit SHA or tag to base :latest off'
        required: true
      tag_name:
        description: 'Optional image tag (e.g. testnet-v1.2.3) to use instead of resolving from git_ref'
        required: false
        default: ''

jobs:
  extractor:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      network: ${{ steps.release_info.outputs.network }}
    steps:
      - name: Clone and resolve tag/network
        id: release_info
        run: |
          git clone https://github.com/ProvableHQ/snarkOS.git
          cd snarkos
          git fetch --tags
          git checkout ${{ github.event.inputs.git_ref }}

          TAG_NAME="${{ github.event.inputs.tag_name }}"
          if [[ -z "$TAG_NAME" ]]; then
            TAG_NAME=$(git describe --tags --exact-match 2>/dev/null || git tag --contains ${{ github.event.inputs.git_ref }} | head -n1 || echo "")
          fi

          if [[ -z "$TAG_NAME" ]]; then
            echo "No tag found for commit ${{ github.event.inputs.git_ref }}"
            exit 1
          fi

          echo "Resolved tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          if [[ "$TAG_NAME" == testnet-* ]]; then
            NETWORK="testnet"
          elif [[ "$TAG_NAME" == canary-* ]]; then
            NETWORK="canary"
          else
            NETWORK="mainnet"
          fi

          echo "Inferred network: $NETWORK"
          echo "network=$NETWORK" >> $GITHUB_OUTPUT

  push-manifest:
    needs: extractor
    runs-on: snarkos-amd64-builder
    steps:
      - name: Export Environment Variables
        run: |
          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "GCP_ARTIFACT_REGISTRY_REGION=${{ vars.GCP_ARTIFACT_REGISTRY_REGION }}" >> $GITHUB_ENV
          echo "GCP_ARTIFACT_REPO=${{ vars.GCP_ARTIFACT_REPO }}" >> $GITHUB_ENV
          echo "DOCKERHUB_REPO=${{ vars.DOCKERHUB_SNARKOS_REPO }}" >> $GITHUB_ENV

      - name: Map NETWORK_NAME
        run: |
          case "${{ needs.extractor.outputs.network }}" in
            mainnet) echo "NETWORK_DIR=mainnet" >> $GITHUB_ENV ;;
            testnet) echo "NETWORK_DIR=testnet" >> $GITHUB_ENV ;;
            canary)  echo "NETWORK_DIR=canary" >> $GITHUB_ENV ;;
            *) echo "Unknown network" && exit 1 ;;
          esac

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_IMG_BUILDER_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker us-east1-docker.pkg.dev

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          # GCP
          docker manifest create us-east1-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_ARTIFACT_REPO}/${NETWORK_DIR}/snarkos:latest \
            --amend us-east1-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_ARTIFACT_REPO}/${NETWORK_DIR}/snarkos:${{ needs.extractor.outputs.tag_name }}-amd64 \
            --amend us-east1-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_ARTIFACT_REPO}/${NETWORK_DIR}/snarkos:${{ needs.extractor.outputs.tag_name }}-arm64

          docker manifest push us-east1-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_ARTIFACT_REPO}/${NETWORK_DIR}/snarkos:latest

          # Docker Hub
          docker manifest create ${DOCKERHUB_REPO}:latest \
            --amend ${DOCKERHUB_REPO}:${{ needs.extractor.outputs.tag_name }}-amd64 \
            --amend ${DOCKERHUB_REPO}:${{ needs.extractor.outputs.tag_name }}-arm64

          docker manifest push ${DOCKERHUB_REPO}:latest
